// Copyright 2025, Colin McKee
// SPDX-License-Identifier: Apache-2.0
package io.github.fletchmckee.ktjni

import com.google.common.truth.Truth.assertThat
import java.io.File
import java.nio.file.Path
import org.gradle.testkit.runner.GradleRunner
import org.gradle.testkit.runner.TaskOutcome
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.io.TempDir

class KtjniPluginTest {
  @TempDir
  lateinit var testProjectDir: Path

  private lateinit var buildFile: File
  private lateinit var settingsFile: File
  private lateinit var srcDir: File
  private lateinit var kotlinFile: File

  @BeforeEach
  fun setup() {
    val projectDir = testProjectDir.toFile()
    buildFile = File(projectDir, "build.gradle.kts")
    settingsFile = File(projectDir, "settings.gradle.kts")
    srcDir = File(projectDir, "src/main/kotlin/com/example").apply { mkdirs() }
    kotlinFile = File(srcDir, "Example.kt")

    settingsFile.writeText(
      """
      rootProject.name = "test-project"
      """.trimIndent(),
    )
  }

  @Test
  fun `plugin applies and generates headers for Example class`() {
    // TODO: Create files to read or at least put this text in its own file.
    //  May also want to create a separate test module to place all of this logic in.
    kotlinFile.writeText(
      """
      package com.example

      class Example {
          external fun exampleNative(): Int
      }
      """.trimIndent(),
    )

    buildFile.writeText(
      """
      plugins {
          kotlin("jvm") version "1.8.0"
          id("io.github.fletchmckee.ktjni")
      }

      repositories {
          mavenCentral()
      }
      """.trimIndent(),
    )

    val result = GradleRunner.create()
      .withProjectDir(testProjectDir.toFile())
      .withPluginClasspath()
      .withArguments("generateJniHeaders", "--info")
      .build()

    assertThat(result.task(":generateJniHeaders")?.outcome).isEqualTo(TaskOutcome.SUCCESS)

    val headerDir = File(testProjectDir.toFile(), "build/generated/ktjni")
    assertThat(headerDir.exists()).isTrue()

    val headerFile = File(headerDir, "com_example_Example.h")
    assertThat(headerFile.exists()).isTrue()

    val headerContent = headerFile.readText()
    assertThat(headerContent).isEqualTo(
      """
      /* DO NOT EDIT THIS FILE - it is machine generated */
      #include <jni.h>
      /* Header for class com_example_Example */

      #ifndef _Included_com_example_Example
      #define _Included_com_example_Example
      #ifdef __cplusplus
      extern "C" {
      #endif

      /*
       * Class:     com_example_Example
       * Method:    exampleNative
       * Signature: ()I
       */
      JNIEXPORT jint JNICALL Java_com_example_Example_exampleNative
        (JNIEnv *, jobject);

      #ifdef __cplusplus
      }
      #endif
      #endif

      """.trimIndent(),
    )
  }
}
